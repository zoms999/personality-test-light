generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonalityTypes {
  id                   String        @id @default(uuid()) @db.Uuid
  type_code            String        @unique @db.VarChar(20)
  type_name            String        @db.VarChar(100)
  title                String        @db.VarChar(500)
  theme_sentence       String
  description          String
  description_points   Json
  strength_keywords    Json
  weakness_keywords    Json
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  questions            Questions[]
  test_results_primary TestResults[] @relation("PrimaryResultForType")

  @@map("personality_types")
}

model Questions {
  id                     Int              @id @default(autoincrement())
  personality_type_id    String           @db.Uuid
  question_text          String
  question_order_in_type Int              @default(1)
  is_active              Boolean          @default(true)
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  personality_type       PersonalityTypes @relation(fields: [personality_type_id], references: [id], onDelete: Cascade)
  user_answers           UserAnswers[]

  @@map("questions")
}

model TestAttempts {
  id                String   @id @default(uuid()) @db.Uuid
  session_id        String?  @db.VarChar(255)
  user_name         String?  @db.VarChar(100)
  birth_date        String?  @db.VarChar(8)
  gender            String?  @db.VarChar(10)
  user_email        String?  @db.VarChar(255)
  phone_number      String?  @db.VarChar(15)
  agreed_to_privacy Boolean  @default(false)
  ip_address        String?  @db.VarChar(45)
  user_agent        String?
  is_completed      Boolean  @default(false)
  completion_time   Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@index([phone_number])
  @@index([user_email])
  @@map("test_attempts")
}

model UserAnswers {
  id              String    @id @default(uuid()) @db.Uuid
  test_attempt_id String    @db.Uuid
  question_id     Int
  answer_option   String?   @db.VarChar(10)
  score           Int
  answer_time     Int?
  created_at      DateTime  @default(now())
  question        Questions @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([test_attempt_id, question_id])
  @@map("user_answers")
}

model TestResults {
  id                          String            @id @default(uuid()) @db.Uuid
  test_attempt_id             String            @unique @db.Uuid
  primary_personality_type_id String?           @db.Uuid
  total_scores                Json
  percentage_scores           Json?
  detailed_analysis           Json?
  recommendations             Json?
  share_token                 String?           @unique @db.VarChar(32)
  is_shared                   Boolean           @default(false)
  created_at                  DateTime          @default(now())
  updated_at                  DateTime          @updatedAt
  primary_personality_type    PersonalityTypes? @relation("PrimaryResultForType", fields: [primary_personality_type_id], references: [id])

  @@map("test_results")
}
